<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>application.properties</value>
            </list>
        </property>
    </bean>

    <bean id="searchProductListRest" class="org.pprun.hjpetstore.client.SearchProductListRest">
        <constructor-arg ref="restTemplate"/>
        <constructor-arg ref="xpathTemplate"/>
        <property name="apiKey" value="${rest.service.apiKey}" />
        <property name="secretKey" value="${rest.service.secretKey}" />
    </bean>


    <!-- the template can be used to call home-grown or external RESTful service -->

    <bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
        <property name="requestFactory">
            <bean class="org.springframework.http.client.CommonsClientHttpRequestFactory">
                <constructor-arg>
                    <bean class="org.apache.commons.httpclient.HttpClient">
                        <constructor-arg index="0">
                            <bean id="httpClientParams" class="org.apache.commons.httpclient.params.HttpClientParams">
                                <property name="authenticationPreemptive" value="true"/>
                            </bean>
                        </constructor-arg>
                        <constructor-arg index="1">
                            <bean class="org.apache.commons.httpclient.MultiThreadedHttpConnectionManager">
                                <property name="params">
                                    <bean class="org.apache.commons.httpclient.params.HttpConnectionManagerParams">
                                        <property name="soTimeout" value="${rest.service.timeout}" />
                                        <property name="connectionTimeout" value="${rest.service.connectionTimeout}" />
                                        <property name="defaultMaxConnectionsPerHost" value="${rest.service.maxConnections}" />
                                        <property name="maxTotalConnections" value="${rest.service.maxTotalConnections}" />
                                        <property name="staleCheckingEnabled" value="${rest.service.staleCheckEnabled}" />
                                    </bean>
                                </property>
                            </bean>
                        </constructor-arg>
                    </bean>
                </constructor-arg>
            </bean>
        </property>
        <!-- 19.9.2 HTTP Message Conversion
            several main media type converters have been registered,
            but if we overwrite tihs property, we have to list all our need
        -->
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.xml.SourceHttpMessageConverter"/>
                <bean class="org.springframework.http.converter.BufferedImageHttpMessageConverter"/>
            </list>
        </property>
    </bean>

    <bean id="xpathTemplate" class="org.springframework.xml.xpath.Jaxp13XPathTemplate"/>
    
</beans>
